{"version":3,"file":"wrappable-text.umd.js","sources":["../node_modules/tiny-inflate/index.js","../node_modules/unicode-trie/index.js","../node_modules/base64-js/lib/b64.js","../node_modules/@craigmorton/linebreak/dist/linebreak.es.min.js","../index.js","example.js"],"sourcesContent":["var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n","// Generated by CoffeeScript 1.7.1\nvar UnicodeTrie, inflate;\n\ninflate = require('tiny-inflate');\n\nUnicodeTrie = (function() {\n  var DATA_BLOCK_LENGTH, DATA_GRANULARITY, DATA_MASK, INDEX_1_OFFSET, INDEX_2_BLOCK_LENGTH, INDEX_2_BMP_LENGTH, INDEX_2_MASK, INDEX_SHIFT, LSCP_INDEX_2_LENGTH, LSCP_INDEX_2_OFFSET, OMITTED_BMP_INDEX_1_LENGTH, SHIFT_1, SHIFT_1_2, SHIFT_2, UTF8_2B_INDEX_2_LENGTH, UTF8_2B_INDEX_2_OFFSET;\n\n  SHIFT_1 = 6 + 5;\n\n  SHIFT_2 = 5;\n\n  SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n  OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n  INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n  INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n  INDEX_SHIFT = 2;\n\n  DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n  DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n  LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\n\n  LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n  INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n  UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\n\n  UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;\n\n  INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n  DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\n  function UnicodeTrie(data) {\n    var isBuffer, uncompressedLength, view;\n    isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';\n    if (isBuffer || data instanceof Uint8Array) {\n      if (isBuffer) {\n        this.highStart = data.readUInt32BE(0);\n        this.errorValue = data.readUInt32BE(4);\n        uncompressedLength = data.readUInt32BE(8);\n        data = data.slice(12);\n      } else {\n        view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0);\n        this.errorValue = view.getUint32(4);\n        uncompressedLength = view.getUint32(8);\n        data = data.subarray(12);\n      }\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      this.data = new Uint32Array(data.buffer);\n    } else {\n      this.data = data.data, this.highStart = data.highStart, this.errorValue = data.errorValue;\n    }\n  }\n\n  UnicodeTrie.prototype.get = function(codePoint) {\n    var index;\n    if (codePoint < 0 || codePoint > 0x10ffff) {\n      return this.errorValue;\n    }\n    if (codePoint < 0xd800 || (codePoint > 0xdbff && codePoint <= 0xffff)) {\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    if (codePoint <= 0xffff) {\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    if (codePoint < this.highStart) {\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    return this.data[this.data.length - DATA_GRANULARITY];\n  };\n\n  return UnicodeTrie;\n\n})();\n\nmodule.exports = UnicodeTrie;\n","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n","var AI,AL,BA,BK,CB,CJ,CR,LF,NL,NS,SA,SG,SP,WJ,XX,CI_BRK,CP_BRK,DI_BRK,IN_BRK,PR_BRK,LineBreaker,UnicodeTrie,base64,classTrie,data,NS_1=NS=5,AL_1=AL=12,BA_1=BA=17,WJ_1=WJ=22,AI_1=AI=29,BK_1=BK=30,CB_1=CB=31,CJ_1=CJ=32,CR_1=CR=33,LF_1=LF=34,NL_1=NL=35,SA_1=SA=36,SG_1=SG=37,SP_1=SP=38,XX_1=XX=39,DI_BRK_1=DI_BRK=0,IN_BRK_1=IN_BRK=1,CI_BRK_1=CI_BRK=2,CP_BRK_1=CP_BRK=3,PR_BRK_1=PR_BRK=4,pairTable=[[PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,CP_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,DI_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,DI_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,PR_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK]];UnicodeTrie=require(\"unicode-trie\"),base64=require(\"base64-js\"),data=base64.toByteArray(\"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\"),classTrie=new UnicodeTrie(data),LineBreaker=function(){var Break,mapClass,mapFirst;return mapClass=function(c){return c===AI_1?AL_1:c===SA_1||c===SG_1||c===XX_1?AL_1:c===CJ_1?NS_1:c},mapFirst=function(c){return c===LF_1||c===NL_1?BK_1:c===CB_1?BA_1:c===SP_1?WJ_1:c},Break=class{constructor(position,required=!1){this.position=position,this.required=required}},class{constructor(string){this.string=string,this.pos=0,this.lastPos=0,this.curClass=null,this.nextClass=null}nextCodePoint(){var code,next;return code=this.string.charCodeAt(this.pos++),next=this.string.charCodeAt(this.pos),55296<=code&&56319>=code&&56320<=next&&57343>=next?(this.pos++,1024*(code-55296)+(next-56320)+65536):code}nextCharClass(first=!1){return mapClass(classTrie.get(this.nextCodePoint()))}nextBreak(){var cur,lastClass,shouldBreak;for(null==this.curClass&&(this.curClass=mapFirst(this.nextCharClass()));this.pos<this.string.length;){if(this.lastPos=this.pos,lastClass=this.nextClass,this.nextClass=this.nextCharClass(),this.curClass===BK_1||this.curClass===CR_1&&this.nextClass!==LF_1)return this.curClass=mapFirst(mapClass(this.nextClass)),new Break(this.lastPos,!0);if(cur=function(){switch(this.nextClass){case SP_1:return this.curClass;case BK_1:case LF_1:case NL_1:return BK_1;case CR_1:return CR_1;case CB_1:return BA_1;}}.call(this),null!=cur){if(this.curClass=cur,this.nextClass===CB_1)return new Break(this.lastPos);continue}switch(shouldBreak=!1,pairTable[this.curClass][this.nextClass]){case DI_BRK_1:shouldBreak=!0;break;case IN_BRK_1:shouldBreak=lastClass===SP_1;break;case CI_BRK_1:if(shouldBreak=lastClass===SP_1,!shouldBreak)continue;break;case CP_BRK_1:if(lastClass!==SP_1)continue;}if(this.curClass=this.nextClass,shouldBreak)return new Break(this.lastPos)}if(this.pos>=this.string.length)return this.lastPos<this.string.length?(this.lastPos=this.string.length,new Break(this.string.length)):null}}}.call(void 0),module.exports=LineBreaker;\n","import LineBreaker from '@craigmorton/linebreak'\n\nconst BR = '\\u000A'\nconst NBSP = '\\u00A0'\nconst SHY = '\\u00AD'\n\nfunction monospace (string) { return string.length }\nfunction getBreaks (string) {\n  const breaker = new LineBreaker(string)\n  const breaks = {}\n\n  while (true) {\n    const br = breaker.nextBreak()\n    if (!br) break\n    breaks[br.position] = br\n  }\n\n  return breaks\n}\n\nexport default class WrappableText {\n  constructor (value, {\n    measure = monospace,\n    br = BR,\n    nbsp = NBSP,\n    shy = SHY\n  } = {}) {\n    this.measure = measure\n    this.entities = { br, nbsp, shy }\n    this.value = value\n      .replace(new RegExp(this.entities.br, 'g'), BR)\n      .replace(new RegExp(this.entities.nbsp, 'g'), NBSP)\n      .replace(new RegExp(this.entities.shy, 'g'), SHY)\n  }\n\n  get isEmpty () {\n    return !this.value\n      .replace(/\\s/g, '')\n      .replace(new RegExp(BR, 'g'), '')\n      .replace(new RegExp(NBSP, 'g'), '')\n      .replace(new RegExp(SHY, 'g'), '')\n  }\n\n  wrap (width = Number.POSITIVE_INFINITY) {\n    if (!isFinite(width)) return this.nowrap()\n\n    const breaks = getBreaks(this.value)\n\n    const lines = []\n\n    let start = 0\n    while (start < this.value.length) {\n      let curr = start\n      let lineWidth = 0\n      while (curr < this.value.length) {\n        // Handle required breaks\n        if (breaks[curr] && breaks[curr].required && !breaks[curr].consumed) {\n          breaks[curr].consumed = true\n          curr--\n          break\n        }\n\n        // Build the line\n        lineWidth += this.measure(this.value.charAt(curr))\n\n        // When the line starts overflowing, find the nearest break before the\n        // cursor, break there and restart from this position\n        if (lineWidth >= width) {\n          const br = Object.values(breaks)\n            .reverse()\n            .find(({ position, consumed }) => !consumed && curr > position)\n\n          if (br) {\n            br.consumed = true\n            curr = br.position\n            break\n          }\n        }\n\n        // Advance one char\n        curr++\n      }\n\n      // Get the line value\n      let value = this.value.substring(start, curr).trim()\n\n      // Handle shy\n      if (this.value.charAt(curr - 1) === SHY) value += '-'\n      value = value.replace(SHY, '')\n\n      lines.push({ value, width: this.measure(value) })\n      start = curr\n    }\n\n    return {\n      lines,\n      overflow: !!lines.find(line => line.width > width)\n    }\n  }\n\n  nowrap (width = Number.POSITIVE_INFINITY) {\n    const lineWidth = this.measure(this.value)\n    // We use the same object structure as WrappableText.wrap() so that both\n    // methods can be used interchangeably\n    return {\n      lines: [{ value: this.value, width: lineWidth }],\n      overflow: lineWidth > width\n    }\n  }\n}\n","import WrappableText from '..'\n\nconst canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d')\n\nrender()\nwindow.addEventListener('resize', () => requestAnimationFrame(render))\n\nfunction render () {\n  const margin = 50\n  const dpi = window.devicePixelRatio || 1\n  canvas.style.setProperty('--margin', margin + 'px')\n  canvas.width = (window.innerWidth - margin * 4) * dpi\n  canvas.height = (window.innerHeight - margin * 4) * dpi\n  canvas.style.width = (canvas.width / dpi) + 'px'\n  canvas.style.height = (canvas.height / dpi) + 'px'\n\n  const fontSize = (canvas.height / dpi) * 0.1\n\n  ctx.font = `${fontSize}px \"Helvetica\"`\n  ctx.strokeStyle = '#9a1fff'\n  ctx.scale(dpi, dpi)\n\n  const text = new WrappableText(`Hello world&nbsp;! Jean-François.<br><br>Psycho&shy;logie`, {\n    br: /<br\\/?>/,\n    nbsp: /&nbsp;/,\n    shy: /&shy;/,\n    measure: string => {\n      ctx.font = `${fontSize}px \"Helvetica\"`\n      return ctx.measureText(string).width\n    }\n  })\n\n  // Wrap text to canvas width\n  const { lines, overflow } = text.wrap(canvas.width / dpi)\n  console.log(text, { lines, overflow })\n\n  // Render lines\n  ctx.fillStyle = overflow ? 'rgb(255, 75, 78)' : 'black'\n  lines.forEach((line, index) => {\n    const baseline = (index + 1) * fontSize\n\n    ctx.beginPath()\n    ctx.moveTo(0, baseline)\n    ctx.lineTo(line.width, baseline)\n    ctx.stroke()\n\n    ctx.fillText(line.value, 0, baseline)\n  })\n}\n"],"names":["Tree","this","table","Uint16Array","trans","Data","source","dest","sourceIndex","tag","bitcount","destLen","ltree","dtree","sltree","sdtree","length_bits","Uint8Array","length_base","dist_bits","dist_base","clcidx","code_tree","lengths","tinf_build_bits_base","bits","base","delta","first","i","sum","inflate","offs","tinf_build_tree","t","off","num","tinf_getbit","d","bit","tinf_read_bits","val","tinf_decode_symbol","cur","len","tinf_decode_trees","lt","dt","hlit","hdist","hclen","length","clen","sym","prev","tinf_inflate_block_data","dist","tinf_inflate_uncompressed_block","tinf_build_fixed_trees","bfinal","res","Error","slice","subarray","UnicodeTrie","data","isBuffer","uncompressedLength","view","readUInt32BE","highStart","errorValue","DataView","buffer","getUint32","Uint32Array","prototype","get","codePoint","DATA_BLOCK_LENGTH","INDEX_2_BLOCK_LENGTH","exports","Arr","Array","PLUS","charCodeAt","SLASH","NUMBER","LOWER","UPPER","PLUS_URL_SAFE","SLASH_URL_SAFE","decode","elt","code","toByteArray","b64","j","l","tmp","placeHolders","arr","charAt","L","push","v","fromByteArray","uint8","temp","extraBytes","output","encode","LineBreaker","classTrie","pairTable","require$$0","require$$1","Break","mapClass","mapFirst","c","[object Object]","position","required","string","pos","lastPos","curClass","nextClass","next","nextCodePoint","lastClass","shouldBreak","nextCharClass","call","module","monospace","WrappableText","value","measure","br","nbsp","shy","entities","replace","RegExp","wrap","width","Number","POSITIVE_INFINITY","isFinite","nowrap","breaks","breaker","nextBreak","getBreaks","lines","start","curr","lineWidth","_this","consumed","Object","values","reverse","find","substring","trim","overflow","line","canvas","document","querySelector","ctx","getContext","render","dpi","window","devicePixelRatio","style","setProperty","margin","innerWidth","height","innerHeight","fontSize","font","strokeStyle","scale","text","measureText","console","log","fillStyle","forEach","index","baseline","beginPath","moveTo","lineTo","stroke","fillText","addEventListener","requestAnimationFrame"],"mappings":"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"}