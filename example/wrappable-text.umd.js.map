{"version":3,"file":"wrappable-text.umd.js","sources":["../node_modules/tiny-inflate/index.js","../node_modules/unicode-trie/index.js","../node_modules/base64-js/lib/b64.js","../node_modules/@craigmorton/linebreak/dist/linebreak.es.min.js","../index.js","example.js"],"sourcesContent":["var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n","// Generated by CoffeeScript 1.7.1\nvar UnicodeTrie, inflate;\n\ninflate = require('tiny-inflate');\n\nUnicodeTrie = (function() {\n  var DATA_BLOCK_LENGTH, DATA_GRANULARITY, DATA_MASK, INDEX_1_OFFSET, INDEX_2_BLOCK_LENGTH, INDEX_2_BMP_LENGTH, INDEX_2_MASK, INDEX_SHIFT, LSCP_INDEX_2_LENGTH, LSCP_INDEX_2_OFFSET, OMITTED_BMP_INDEX_1_LENGTH, SHIFT_1, SHIFT_1_2, SHIFT_2, UTF8_2B_INDEX_2_LENGTH, UTF8_2B_INDEX_2_OFFSET;\n\n  SHIFT_1 = 6 + 5;\n\n  SHIFT_2 = 5;\n\n  SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n  OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n  INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n  INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n  INDEX_SHIFT = 2;\n\n  DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n  DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n  LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\n\n  LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n  INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n  UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\n\n  UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;\n\n  INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n  DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\n  function UnicodeTrie(data) {\n    var isBuffer, uncompressedLength, view;\n    isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';\n    if (isBuffer || data instanceof Uint8Array) {\n      if (isBuffer) {\n        this.highStart = data.readUInt32BE(0);\n        this.errorValue = data.readUInt32BE(4);\n        uncompressedLength = data.readUInt32BE(8);\n        data = data.slice(12);\n      } else {\n        view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0);\n        this.errorValue = view.getUint32(4);\n        uncompressedLength = view.getUint32(8);\n        data = data.subarray(12);\n      }\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      this.data = new Uint32Array(data.buffer);\n    } else {\n      this.data = data.data, this.highStart = data.highStart, this.errorValue = data.errorValue;\n    }\n  }\n\n  UnicodeTrie.prototype.get = function(codePoint) {\n    var index;\n    if (codePoint < 0 || codePoint > 0x10ffff) {\n      return this.errorValue;\n    }\n    if (codePoint < 0xd800 || (codePoint > 0xdbff && codePoint <= 0xffff)) {\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    if (codePoint <= 0xffff) {\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    if (codePoint < this.highStart) {\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    return this.data[this.data.length - DATA_GRANULARITY];\n  };\n\n  return UnicodeTrie;\n\n})();\n\nmodule.exports = UnicodeTrie;\n","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n","var AI,AL,BA,BK,CB,CJ,CR,LF,NL,NS,SA,SG,SP,WJ,XX,CI_BRK,CP_BRK,DI_BRK,IN_BRK,PR_BRK,LineBreaker,UnicodeTrie,base64,classTrie,data,NS_1=NS=5,AL_1=AL=12,BA_1=BA=17,WJ_1=WJ=22,AI_1=AI=29,BK_1=BK=30,CB_1=CB=31,CJ_1=CJ=32,CR_1=CR=33,LF_1=LF=34,NL_1=NL=35,SA_1=SA=36,SG_1=SG=37,SP_1=SP=38,XX_1=XX=39,DI_BRK_1=DI_BRK=0,IN_BRK_1=IN_BRK=1,CI_BRK_1=CI_BRK=2,CP_BRK_1=CP_BRK=3,PR_BRK_1=PR_BRK=4,pairTable=[[PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,CP_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,DI_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,DI_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,PR_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK],[IN_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,IN_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,DI_BRK],[DI_BRK,PR_BRK,PR_BRK,IN_BRK,IN_BRK,IN_BRK,PR_BRK,PR_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK,IN_BRK,DI_BRK,DI_BRK,PR_BRK,CI_BRK,PR_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,DI_BRK,IN_BRK]];UnicodeTrie=require(\"unicode-trie\"),base64=require(\"base64-js\"),data=base64.toByteArray(\"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\"),classTrie=new UnicodeTrie(data),LineBreaker=function(){var Break,mapClass,mapFirst;return mapClass=function(c){return c===AI_1?AL_1:c===SA_1||c===SG_1||c===XX_1?AL_1:c===CJ_1?NS_1:c},mapFirst=function(c){return c===LF_1||c===NL_1?BK_1:c===CB_1?BA_1:c===SP_1?WJ_1:c},Break=class{constructor(position,required=!1){this.position=position,this.required=required}},class{constructor(string){this.string=string,this.pos=0,this.lastPos=0,this.curClass=null,this.nextClass=null}nextCodePoint(){var code,next;return code=this.string.charCodeAt(this.pos++),next=this.string.charCodeAt(this.pos),55296<=code&&56319>=code&&56320<=next&&57343>=next?(this.pos++,1024*(code-55296)+(next-56320)+65536):code}nextCharClass(first=!1){return mapClass(classTrie.get(this.nextCodePoint()))}nextBreak(){var cur,lastClass,shouldBreak;for(null==this.curClass&&(this.curClass=mapFirst(this.nextCharClass()));this.pos<this.string.length;){if(this.lastPos=this.pos,lastClass=this.nextClass,this.nextClass=this.nextCharClass(),this.curClass===BK_1||this.curClass===CR_1&&this.nextClass!==LF_1)return this.curClass=mapFirst(mapClass(this.nextClass)),new Break(this.lastPos,!0);if(cur=function(){switch(this.nextClass){case SP_1:return this.curClass;case BK_1:case LF_1:case NL_1:return BK_1;case CR_1:return CR_1;case CB_1:return BA_1;}}.call(this),null!=cur){if(this.curClass=cur,this.nextClass===CB_1)return new Break(this.lastPos);continue}switch(shouldBreak=!1,pairTable[this.curClass][this.nextClass]){case DI_BRK_1:shouldBreak=!0;break;case IN_BRK_1:shouldBreak=lastClass===SP_1;break;case CI_BRK_1:if(shouldBreak=lastClass===SP_1,!shouldBreak)continue;break;case CP_BRK_1:if(lastClass!==SP_1)continue;}if(this.curClass=this.nextClass,shouldBreak)return new Break(this.lastPos)}if(this.pos>=this.string.length)return this.lastPos<this.string.length?(this.lastPos=this.string.length,new Break(this.string.length)):null}}}.call(void 0),module.exports=LineBreaker;\n","import LineBreaker from '@craigmorton/linebreak'\n\nconst BR = '\\u000A'\nconst NBSP = '\\u00A0'\nconst SHY = '\\u00AD'\n\nfunction monospace (string) { return string.length }\nfunction getBreaks (string) {\n  const breaker = new LineBreaker(string)\n  const breaks = {}\n\n  while (true) {\n    const br = breaker.nextBreak()\n    if (!br) break\n    breaks[br.position] = br\n  }\n\n  return breaks\n}\n\nexport default class WrappableText {\n  constructor (value, {\n    measure = monospace,\n    br = BR,\n    nbsp = NBSP,\n    shy = SHY\n  } = {}) {\n    this.measure = measure\n    this.entities = { br, nbsp, shy }\n    this.value = value\n      .replace(new RegExp(this.entities.br, 'g'), BR)\n      .replace(new RegExp(this.entities.nbsp, 'g'), NBSP)\n      .replace(new RegExp(this.entities.shy, 'g'), SHY)\n  }\n\n  get isEmpty () {\n    return !this.value\n      .replace(new RegExp(BR, 'g'), '')\n      .replace(new RegExp(NBSP, 'g'), '')\n      .replace(new RegExp(SHY, 'g'), '')\n  }\n\n  wrap (width = Number.POSITIVE_INFINITY) {\n    if (!isFinite(width)) return this.nowrap()\n\n    const breaks = getBreaks(this.value)\n\n    const lines = []\n\n    let start = 0\n    while (start < this.value.length) {\n      let curr = start\n      let lineWidth = 0\n      while (curr < this.value.length) {\n        // Handle required breaks\n        if (breaks[curr] && breaks[curr].required && !breaks[curr].consumed) {\n          breaks[curr].consumed = true\n          curr--\n          break\n        }\n\n        // Build the line\n        lineWidth += this.measure(this.value.charAt(curr))\n\n        // When the line starts overflowing, find the nearest break before the\n        // cursor, break there and restart from this position\n        if (lineWidth >= width) {\n          const br = Object.values(breaks)\n            .reverse()\n            .find(({ position, consumed }) => !consumed && curr > position)\n\n          if (br) {\n            br.consumed = true\n            curr = br.position\n            break\n          }\n        }\n\n        // Advance one char\n        curr++\n      }\n\n      // Get the line value\n      let value = this.value.substring(start, curr).trim()\n\n      // Handle shy\n      if (this.value.charAt(curr - 1) === SHY) value += '-'\n      value = value.replace(SHY, '')\n\n      lines.push({ value, width: this.measure(value) })\n      start = curr\n    }\n\n    return {\n      lines,\n      overflow: !!lines.find(line => line.width > width)\n    }\n  }\n\n  nowrap (width = Number.POSITIVE_INFINITY) {\n    const lineWidth = this.measure(this.value)\n    // We use the same object structure as WrappableText.wrap() so that both\n    // methods can be used interchangeably\n    return {\n      lines: [{ value: this.value, width: lineWidth }],\n      overflow: lineWidth > width\n    }\n  }\n}\n","import WrappableText from '..'\n\nconst canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d')\nconst fontSize = 100\n\nconst text = new WrappableText(`Hello world&nbsp;! Jean-François.<br><br>Psycho&shy;logie`, {\n  br: /<br\\/?>/,\n  nbsp: /&nbsp;/,\n  shy: /&shy;/,\n  measure: string => {\n    ctx.font = `${fontSize}px \"Helvetica\"`\n    return ctx.measureText(string).width\n  }\n})\n\nconsole.log(text)\n\nrender()\nwindow.addEventListener('resize', () => requestAnimationFrame(render))\n\nfunction render () {\n  const margin = 50\n  const dpi = window.devicePixelRatio || 1\n  canvas.style.setProperty('--margin', margin + 'px')\n  canvas.width = (window.innerWidth - margin * 4) * dpi\n  canvas.height = (window.innerHeight - margin * 4) * dpi\n  canvas.style.width = (canvas.width / dpi) + 'px'\n  canvas.style.height = (canvas.height / dpi) + 'px'\n\n  ctx.font = `${fontSize}px \"Helvetica\"`\n  ctx.strokeStyle = '#9a1fff'\n  ctx.scale(dpi, dpi)\n\n  // Wrap text to canvas width\n  const { lines, overflow } = text.wrap(canvas.width / dpi)\n  console.log({ lines, overflow })\n\n  // Render lines\n  ctx.fillStyle = overflow ? 'rgb(255, 75, 78)' : 'black'\n  lines.forEach((line, index) => {\n    const baseline = (index + 1) * fontSize\n\n    ctx.beginPath()\n    ctx.moveTo(0, baseline)\n    ctx.lineTo(line.width, baseline)\n    ctx.stroke()\n\n    ctx.fillText(line.value, 0, baseline)\n  })\n}\n"],"names":["require$$0","require$$1","BR","NBSP","SHY","monospace","string","length","getBreaks","breaker","LineBreaker","breaks","br","nextBreak","position","WrappableText","value","measure","nbsp","shy","entities","replace","RegExp","wrap","width","Number","POSITIVE_INFINITY","isFinite","nowrap","lines","start","curr","lineWidth","required","consumed","charAt","Object","values","reverse","find","substring","trim","push","overflow","line","canvas","document","querySelector","ctx","getContext","fontSize","text","font","measureText","console","log","render","window","addEventListener","requestAnimationFrame","margin","dpi","devicePixelRatio","style","setProperty","innerWidth","height","innerHeight","strokeStyle","scale","fillStyle","forEach","index","baseline","beginPath","moveTo","lineTo","stroke","fillText"],"mappings":"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AAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAACA,WAAuB,CAAC,MAAM,CAACC,GAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,koIAAkoI,CAAC,CAAC,SAAS,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAI,CAAC,aAAa,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,OAAO,IAAI,CAAC,SAAS,EAAE,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,GAAG,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,WAAW,CAAC,SAAS,MAAM,KAAK,QAAQ,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,WAAW;;;ECEjzY,IAAMC,EAAE,GAAG,IAAX;EACA,IAAMC,IAAI,GAAG,MAAb;EACA,IAAMC,GAAG,GAAG,MAAZ;;EAEA,SAASC,SAAT,CAAoBC,MAApB,EAA4B;EAAE,SAAOA,MAAM,CAACC,MAAd;EAAsB;;EACpD,SAASC,SAAT,CAAoBF,MAApB,EAA4B;EAC1B,MAAMG,OAAO,GAAG,IAAIC,gBAAJ,CAAgBJ,MAAhB,CAAhB;EACA,MAAMK,MAAM,GAAG,EAAf;;EAEA,SAAO,IAAP,EAAa;EACX,QAAMC,EAAE,GAAGH,OAAO,CAACI,SAAR,EAAX;EACA,QAAI,CAACD,EAAL,EAAS;EACTD,IAAAA,MAAM,CAACC,EAAE,CAACE,QAAJ,CAAN,GAAsBF,EAAtB;EACD;;EAED,SAAOD,MAAP;EACD;;MAEoBI;EACnB,yBAAaC,KAAb,SAKQ;EAAA,kCAAJ,EAAI;EAAA,4BAJNC,OAIM;EAAA,QAJNA,OAIM,6BAJIZ,SAIJ;EAAA,uBAHNO,EAGM;EAAA,QAHNA,EAGM,wBAHDV,EAGC;EAAA,yBAFNgB,IAEM;EAAA,QAFNA,IAEM,0BAFCf,IAED;EAAA,wBADNgB,GACM;EAAA,QADNA,GACM,yBADAf,GACA;;EACN,SAAKa,OAAL,GAAeA,OAAf;EACA,SAAKG,QAAL,GAAgB;EAAER,MAAAA,EAAE,EAAFA,EAAF;EAAMM,MAAAA,IAAI,EAAJA,IAAN;EAAYC,MAAAA,GAAG,EAAHA;EAAZ,KAAhB;EACA,SAAKH,KAAL,GAAaA,KAAK,CACfK,OADU,CACF,IAAIC,MAAJ,CAAW,KAAKF,QAAL,CAAcR,EAAzB,EAA6B,GAA7B,CADE,EACiCV,EADjC,EAEVmB,OAFU,CAEF,IAAIC,MAAJ,CAAW,KAAKF,QAAL,CAAcF,IAAzB,EAA+B,GAA/B,CAFE,EAEmCf,IAFnC,EAGVkB,OAHU,CAGF,IAAIC,MAAJ,CAAW,KAAKF,QAAL,CAAcD,GAAzB,EAA8B,GAA9B,CAHE,EAGkCf,GAHlC,CAAb;EAID;;;;WASDmB,OAAA,cAAMC,KAAN,EAAwC;EAAA;;EAAA,QAAlCA,KAAkC;EAAlCA,MAAAA,KAAkC,GAA1BC,MAAM,CAACC,iBAAmB;EAAA;;EACtC,QAAI,CAACC,QAAQ,CAACH,KAAD,CAAb,EAAsB,OAAO,KAAKI,MAAL,EAAP;EAEtB,QAAMjB,MAAM,GAAGH,SAAS,CAAC,KAAKQ,KAAN,CAAxB;EAEA,QAAMa,KAAK,GAAG,EAAd;EAEA,QAAIC,KAAK,GAAG,CAAZ;;EAPsC;EASpC,UAAIC,IAAI,GAAGD,KAAX;EACA,UAAIE,SAAS,GAAG,CAAhB;;EACA,aAAOD,IAAI,GAAG,KAAI,CAACf,KAAL,CAAWT,MAAzB,EAAiC;EAC/B;EACA,YAAII,MAAM,CAACoB,IAAD,CAAN,IAAgBpB,MAAM,CAACoB,IAAD,CAAN,CAAaE,QAA7B,IAAyC,CAACtB,MAAM,CAACoB,IAAD,CAAN,CAAaG,QAA3D,EAAqE;EACnEvB,UAAAA,MAAM,CAACoB,IAAD,CAAN,CAAaG,QAAb,GAAwB,IAAxB;EACAH,UAAAA,IAAI;EACJ;EACD,SAN8B;;;EAS/BC,QAAAA,SAAS,IAAI,KAAI,CAACf,OAAL,CAAa,KAAI,CAACD,KAAL,CAAWmB,MAAX,CAAkBJ,IAAlB,CAAb,CAAb,CAT+B;EAY/B;;EACA,YAAIC,SAAS,IAAIR,KAAjB,EAAwB;EACtB,cAAMZ,EAAE,GAAGwB,MAAM,CAACC,MAAP,CAAc1B,MAAd,EACR2B,OADQ,GAERC,IAFQ,CAEH;EAAA,gBAAGzB,QAAH,SAAGA,QAAH;EAAA,gBAAaoB,QAAb,SAAaA,QAAb;EAAA,mBAA4B,CAACA,QAAD,IAAaH,IAAI,GAAGjB,QAAhD;EAAA,WAFG,CAAX;;EAIA,cAAIF,EAAJ,EAAQ;EACNA,YAAAA,EAAE,CAACsB,QAAH,GAAc,IAAd;EACAH,YAAAA,IAAI,GAAGnB,EAAE,CAACE,QAAV;EACA;EACD;EACF,SAvB8B;;;EA0B/BiB,QAAAA,IAAI;EACL,OAtCmC;;;EAyCpC,UAAIf,KAAK,GAAG,KAAI,CAACA,KAAL,CAAWwB,SAAX,CAAqBV,KAArB,EAA4BC,IAA5B,EAAkCU,IAAlC,EAAZ,CAzCoC;;;EA4CpC,UAAI,KAAI,CAACzB,KAAL,CAAWmB,MAAX,CAAkBJ,IAAI,GAAG,CAAzB,MAAgC3B,GAApC,EAAyCY,KAAK,IAAI,GAAT;EACzCA,MAAAA,KAAK,GAAGA,KAAK,CAACK,OAAN,CAAcjB,GAAd,EAAmB,EAAnB,CAAR;EAEAyB,MAAAA,KAAK,CAACa,IAAN,CAAW;EAAE1B,QAAAA,KAAK,EAALA,KAAF;EAASQ,QAAAA,KAAK,EAAE,KAAI,CAACP,OAAL,CAAaD,KAAb;EAAhB,OAAX;EACAc,MAAAA,KAAK,GAAGC,IAAR;EAhDoC;;EAQtC,WAAOD,KAAK,GAAG,KAAKd,KAAL,CAAWT,MAA1B,EAAkC;EAAA;EAyCjC;;EAED,WAAO;EACLsB,MAAAA,KAAK,EAALA,KADK;EAELc,MAAAA,QAAQ,EAAE,CAAC,CAACd,KAAK,CAACU,IAAN,CAAW,UAAAK,IAAI;EAAA,eAAIA,IAAI,CAACpB,KAAL,GAAaA,KAAjB;EAAA,OAAf;EAFP,KAAP;EAID;;WAEDI,SAAA,gBAAQJ,KAAR,EAA0C;EAAA,QAAlCA,KAAkC;EAAlCA,MAAAA,KAAkC,GAA1BC,MAAM,CAACC,iBAAmB;EAAA;;EACxC,QAAMM,SAAS,GAAG,KAAKf,OAAL,CAAa,KAAKD,KAAlB,CAAlB,CADwC;EAGxC;;EACA,WAAO;EACLa,MAAAA,KAAK,EAAE,CAAC;EAAEb,QAAAA,KAAK,EAAE,KAAKA,KAAd;EAAqBQ,QAAAA,KAAK,EAAEQ;EAA5B,OAAD,CADF;EAELW,MAAAA,QAAQ,EAAEX,SAAS,GAAGR;EAFjB,KAAP;EAID;;;;WAxED,eAAe;EACb,aAAO,CAAC,KAAKR,KAAL,CACLK,OADK,CACG,IAAIC,MAAJ,CAAWpB,EAAX,EAAe,GAAf,CADH,EACwB,EADxB,EAELmB,OAFK,CAEG,IAAIC,MAAJ,CAAWnB,IAAX,EAAiB,GAAjB,CAFH,EAE0B,EAF1B,EAGLkB,OAHK,CAGG,IAAIC,MAAJ,CAAWlB,GAAX,EAAgB,GAAhB,CAHH,EAGyB,EAHzB,CAAR;EAID;;;;;;ECtCH,IAAMyC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;EACA,IAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;EACA,IAAMC,QAAQ,GAAG,GAAjB;EAEA,IAAMC,IAAI,GAAG,IAAIpC,aAAJ,iEAA+E;EAC1FH,EAAAA,EAAE,EAAE,SADsF;EAE1FM,EAAAA,IAAI,EAAE,QAFoF;EAG1FC,EAAAA,GAAG,EAAE,OAHqF;EAI1FF,EAAAA,OAAO,EAAE,iBAAAX,MAAM,EAAI;EACjB0C,IAAAA,GAAG,CAACI,IAAJ,GAAcF,QAAd;EACA,WAAOF,GAAG,CAACK,WAAJ,CAAgB/C,MAAhB,EAAwBkB,KAA/B;EACD;EAPyF,CAA/E,CAAb;EAUA8B,OAAO,CAACC,GAAR,CAAYJ,IAAZ;EAEAK,MAAM;EACNC,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC;EAAA,SAAMC,qBAAqB,CAACH,MAAD,CAA3B;EAAA,CAAlC;;EAEA,SAASA,MAAT,GAAmB;EACjB,MAAMI,MAAM,GAAG,EAAf;EACA,MAAMC,GAAG,GAAGJ,MAAM,CAACK,gBAAP,IAA2B,CAAvC;EACAjB,EAAAA,MAAM,CAACkB,KAAP,CAAaC,WAAb,CAAyB,UAAzB,EAAqCJ,MAAM,GAAG,IAA9C;EACAf,EAAAA,MAAM,CAACrB,KAAP,GAAe,CAACiC,MAAM,CAACQ,UAAP,GAAoBL,MAAM,GAAG,CAA9B,IAAmCC,GAAlD;EACAhB,EAAAA,MAAM,CAACqB,MAAP,GAAgB,CAACT,MAAM,CAACU,WAAP,GAAqBP,MAAM,GAAG,CAA/B,IAAoCC,GAApD;EACAhB,EAAAA,MAAM,CAACkB,KAAP,CAAavC,KAAb,GAAsBqB,MAAM,CAACrB,KAAP,GAAeqC,GAAhB,GAAuB,IAA5C;EACAhB,EAAAA,MAAM,CAACkB,KAAP,CAAaG,MAAb,GAAuBrB,MAAM,CAACqB,MAAP,GAAgBL,GAAjB,GAAwB,IAA9C;EAEAb,EAAAA,GAAG,CAACI,IAAJ,GAAcF,QAAd;EACAF,EAAAA,GAAG,CAACoB,WAAJ,GAAkB,SAAlB;EACApB,EAAAA,GAAG,CAACqB,KAAJ,CAAUR,GAAV,EAAeA,GAAf,EAXiB;;EAcjB,mBAA4BV,IAAI,CAAC5B,IAAL,CAAUsB,MAAM,CAACrB,KAAP,GAAeqC,GAAzB,CAA5B;EAAA,MAAQhC,KAAR,cAAQA,KAAR;EAAA,MAAec,QAAf,cAAeA,QAAf;;EACAW,EAAAA,OAAO,CAACC,GAAR,CAAY;EAAE1B,IAAAA,KAAK,EAALA,KAAF;EAASc,IAAAA,QAAQ,EAARA;EAAT,GAAZ,EAfiB;;EAkBjBK,EAAAA,GAAG,CAACsB,SAAJ,GAAgB3B,QAAQ,GAAG,kBAAH,GAAwB,OAAhD;EACAd,EAAAA,KAAK,CAAC0C,OAAN,CAAc,UAAC3B,IAAD,EAAO4B,KAAP,EAAiB;EAC7B,QAAMC,QAAQ,GAAG,CAACD,KAAK,GAAG,CAAT,IAActB,QAA/B;EAEAF,IAAAA,GAAG,CAAC0B,SAAJ;EACA1B,IAAAA,GAAG,CAAC2B,MAAJ,CAAW,CAAX,EAAcF,QAAd;EACAzB,IAAAA,GAAG,CAAC4B,MAAJ,CAAWhC,IAAI,CAACpB,KAAhB,EAAuBiD,QAAvB;EACAzB,IAAAA,GAAG,CAAC6B,MAAJ;EAEA7B,IAAAA,GAAG,CAAC8B,QAAJ,CAAalC,IAAI,CAAC5B,KAAlB,EAAyB,CAAzB,EAA4ByD,QAA5B;EACD,GATD;EAUD;;;;"}